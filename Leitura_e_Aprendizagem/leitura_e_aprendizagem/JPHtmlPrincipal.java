/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package leitura_e_aprendizagem;

import br.com.jmary.home.Home;
import br.com.jmary.home.beans.Materia;
import br.com.jmary.home.jpa.JPAUtil;
import sistema_tree.Sistema_CriarNodes_ParaTree2;
import java.awt.Component;
import java.util.List;
import javax.persistence.Query;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import sistema_iconestrees.IconesTrees;
import sistema_tree.Sistema_CriarNodes_ParaTree1;

/**
 *
 * @author Ana
 */
public class JPHtmlPrincipal extends javax.swing.JPanel {
    
    JPHtmlPrincipal JPHtmlPrincipal;
    public Home     Home;
    public String   materia;
    public int      idNoBanco;
    
    public BookInfo BookInfo;    
    
    Sistema_CriarNodes_ParaTree2 Sistema_Tree2;
        
    /**
     * Creates new form JPHtmlPrincipal
     * @param HomeR
     * @param materia2
     * @param idNoBanco2
     */
    public JPHtmlPrincipal( Home HomeR, String materia2, int idNoBanco2 ) {
        initComponents();        
        
        Home = HomeR;
        materia = materia2;
        idNoBanco = idNoBanco2;
                                     
        JPHtmlPrincipal = this;
        inicio();

        //jSplitPane2.setDividerLocation( 260 ); 
    }       
            
    private void inicio(){
        /*new Thread() {   @Override public void run() {*/ try {  
            
            List<Materia> ListMateria = null;            
            try{
                Query q = JPAUtil.em().createNativeQuery( "SELECT * FROM JM.MATERIA WHERE ID = ?", Materia.class );
                q.setParameter(1, idNoBanco );            
                ListMateria = q.getResultList();
            }catch(Exception e ){}
            
            String rbusca = ""; try{ rbusca = ListMateria.get(0).getMateria(); }catch( Exception e ){}
            
            if( !rbusca.equals("") ){
                
                String endMateria = System.getProperty("user.dir") + ListMateria.get(0).getMateriapaginahtml();
                BookInfo = new BookInfo( ListMateria.get(0).getMateria(), endMateria, "MATERIA", ListMateria.get(0).getId(), IconesTrees.root, IconesTrees.pastaFechada, IconesTrees.pastaAberta, IconesTrees.nod, IconesTrees.nodPastaAberta );
            }
            else{
                
                String modelo = System.getProperty("user.dir") + "//" + "00_Externo" + "//" + "modelo.html";;
                BookInfo = new BookInfo("MATERIA", modelo, "MATERIA", idNoBanco, IconesTrees.root, IconesTrees.pastaFechada, IconesTrees.pastaAberta, IconesTrees.nod, IconesTrees.nodPastaAberta);          
            }
                       
            
            Sistema_Tree2 = new Sistema_CriarNodes_ParaTree2( Home, JPHtmlPrincipal, BookInfo );
            Sistema_CriarNodes_ParaTree1 Sistema_Tree1 = new Sistema_CriarNodes_ParaTree1( Home, JPHtmlPrincipal, BookInfo );   
                  
            PersonalizarTree1();
            PersonalizarTree2();
            
            Thread.sleep( 100 );
            jSplitPane2.setDividerLocation( 210 ); 
        } catch( Exception e ){} //} }.start(); 
    }
    
    boolean boosetDividerLocation = false;
    public void setarDividerLocation_Trees(int esp){
        try{
            jSplitPaneHtmlPrincipal.setDividerLocation( esp );        
        } catch( Exception e ){}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPaneHtmlPrincipal = new javax.swing.JSplitPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tree2 = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        tree1 = new javax.swing.JTree();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jSplitPaneHtmlPrincipal.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jSplitPaneHtmlPrincipal.setDividerLocation(200);
        jSplitPaneHtmlPrincipal.setDividerSize(1);
        jSplitPaneHtmlPrincipal.setOneTouchExpandable(true);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jSplitPane2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jSplitPane2.setDividerLocation(300);
        jSplitPane2.setDividerSize(2);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setOneTouchExpandable(true);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        tree2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("JMarySystems");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Modelo");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Tree");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        tree2.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        tree2.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                tree2ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(tree2);

        jSplitPane2.setBottomComponent(jScrollPane1);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        tree1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("JMarySystems");
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Modelo");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Tree");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        tree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        tree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                tree1ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(tree1);

        jSplitPane2.setLeftComponent(jScrollPane2);

        jTabbedPane1.addTab("Índice", jSplitPane2);

        jSplitPaneHtmlPrincipal.setLeftComponent(jTabbedPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPaneHtmlPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPaneHtmlPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_tree1ValueChanged
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree1.getLastSelectedPathComponent();

        try {
            if ( node == null ) { return; }
        
            Object nodeInfo = node.getUserObject();
            BookInfo = (BookInfo) nodeInfo;

            JPHtmlPrincipal_Inicio setarJEditorPane_Inicio = new JPHtmlPrincipal_Inicio( Home, BookInfo, this );

            Sistema_Tree2 = new Sistema_CriarNodes_ParaTree2( Home, this, BookInfo );
                                
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "JPHtmlPrincipal - Método: tree1ValueChanged tree1\n" + e.getMessage());
        }
    }//GEN-LAST:event_tree1ValueChanged

    private void tree2ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_tree2ValueChanged
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree2.getLastSelectedPathComponent();
 
        try {
            if ( node == null ) { return; }
        
            Object nodeInfo = node.getUserObject();
            BookInfo = (BookInfo) nodeInfo;

            JPHtmlPrincipal_Inicio setarJEditorPane_Inicio = new JPHtmlPrincipal_Inicio( Home, BookInfo, this );
        
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "JPHtmlPrincipal - Método: tree1ValueChanged tree2\n" + e.getMessage().toString());
        }
    }//GEN-LAST:event_tree2ValueChanged
    
    private DefaultMutableTreeNode book;    
    public void livro2( DefaultMutableTreeNode livroParaAdd, String nome, String url, String tipoNoBanco, int idNoBanco, String root, String pastaNoExpande, String pastaExpande, String nod, String nodTree1 ) {
        try{ 
            book = new DefaultMutableTreeNode(new BookInfo ( nome, url, tipoNoBanco, idNoBanco, root, pastaNoExpande, pastaExpande, nod, nodTree1 ) );
        } catch( Exception e ) { 
            JOptionPane.showMessageDialog( null, "BookInfo - Método: livro \n" + e.getMessage() ); 
        }
        livroParaAdd.add( book );
    } 
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane2;
    public javax.swing.JSplitPane jSplitPaneHtmlPrincipal;
    private javax.swing.JTabbedPane jTabbedPane1;
    public javax.swing.JTree tree1;
    public javax.swing.JTree tree2;
    // End of variables declaration//GEN-END:variables

    /**Iníprivatcio PersonalizarTree*/
    private void PersonalizarTree( final JTree tree ){         
        try{
        tree.setCellRenderer(new DefaultTreeCellRenderer() {
                @Override
             public Component getTreeCellRendererComponent(JTree pTree,
                 Object Value, boolean pIsSelected, boolean pIsExpanded,
                 boolean pIsLeaf, int pRow, boolean pHasFocus) {
  
	    DefaultMutableTreeNode node = ( DefaultMutableTreeNode )Value;  
            Object nodeInfo = node.getUserObject();
            BookInfo book = (BookInfo) nodeInfo;
	    super.getTreeCellRendererComponent(pTree, Value, pIsSelected,
                     pIsExpanded, pIsLeaf, pRow, pHasFocus);

            //setBackgroundNonSelectionColor(new Color(255, 255, 255)); 
     
            if ( node.isRoot() || ( !node.isLeaf() ) || ( node.isLeaf() ) ) {
                if ( node.isRoot() ) {
                    setIcon(new ImageIcon(getClass().getResource( book.treeRoot )));
                    //setTextNonSelectionColor (new Color (0, 0, 0) ); 
                
                } else if ( !node.isLeaf() && !node.isLeaf() != node.isRoot() ) {               
                    //setTextNonSelectionColor (new Color (0, 0, 0) ); 
                    //setBackgroundSelectionColor(new Color(0, 255, 0)); 
                    //setBorderSelectionColor(Color.YELLOW); 
                    //setTextSelectionColor(Color.blue);
                    setIcon(new ImageIcon(getClass().getResource( book.treePastaNoExpande )));
                } else {
                    if ( tree == tree1 ){ 
                        setIcon(new ImageIcon(getClass().getResource( book.tree1Nod )));
                    } else {
                        setIcon(new ImageIcon(getClass().getResource( book.treeNod )));
                    }                    
                    //setTextNonSelectionColor (new Color (0, 0, 0) ); 
                }
            }
            
            if ( pIsExpanded && !node.isRoot()){
                setIcon(new ImageIcon(getClass().getResource( book.treePastaExpande )));
            }
            if ( pIsLeaf ){
                //setBackgroundSelectionColor(new Color(255, 255, 0)); 
            }                
	    return (this);
	}
        });  
     
        } catch ( Exception e ) {
            //JOptionPane.showMessageDialog( null, "Home - Método: PersonalizarTree() \n" + e.getMessage() );
        }
        
    }  
    
    /**Iníprivatcio PersonalizarTree*/
    private void PersonalizarTree1(){         
        try{
        tree1.setCellRenderer(new DefaultTreeCellRenderer() {
                @Override
             public Component getTreeCellRendererComponent(JTree pTree,
                 Object Value, boolean pIsSelected, boolean pIsExpanded,
                 boolean pIsLeaf, int pRow, boolean pHasFocus) {
  
	    DefaultMutableTreeNode node = ( DefaultMutableTreeNode )Value;  
            Object nodeInfo = node.getUserObject();
            BookInfo book = (BookInfo) nodeInfo;
	    super.getTreeCellRendererComponent(pTree, Value, pIsSelected,
                     pIsExpanded, pIsLeaf, pRow, pHasFocus);

            //setBackgroundNonSelectionColor(new Color(255, 255, 255)); 
     
            if ( node.isRoot() || ( !node.isLeaf() ) || ( node.isLeaf() ) ) {
                if ( node.isRoot() ) {
                    setIcon(new ImageIcon(getClass().getResource( book.treeRoot )));
                    //setTextNonSelectionColor (new Color (0, 0, 0) ); 
                
                } else if ( !node.isLeaf() && !node.isLeaf() != node.isRoot() ) {               
                    //setTextNonSelectionColor (new Color (0, 0, 0) ); 
                    //setBackgroundSelectionColor(new Color(0, 255, 0)); 
                    //setBorderSelectionColor(Color.YELLOW); 
                    //setTextSelectionColor(Color.blue);
                    setIcon(new ImageIcon(getClass().getResource( book.treePastaNoExpande )));
                } else {
                    //if ( tree == tree1 ){ 
                        setIcon(new ImageIcon(getClass().getResource( book.tree1Nod )));
                    //} else {
                        //setIcon(new ImageIcon(getClass().getResource( book.treeNod )));
                    //}                    
                    //setTextNonSelectionColor (new Color (0, 0, 0) ); 
                }
            }
            
            if ( pIsExpanded && !node.isRoot()){
                setIcon(new ImageIcon(getClass().getResource( book.treePastaExpande )));
            }
            if ( pIsLeaf ){
                //setBackgroundSelectionColor(new Color(255, 255, 0)); 
            }                
	    return (this);
	}
        });  
     
        } catch ( Exception e ) {
            //JOptionPane.showMessageDialog( null, "Home - Método: PersonalizarTree() \n" + e.getMessage() );
        }
        
    }   

    /**Iníprivatcio PersonalizarTree*/
    private void PersonalizarTree2(){         
        try{
        tree2.setCellRenderer(new DefaultTreeCellRenderer() {
                @Override
             public Component getTreeCellRendererComponent(JTree pTree,
                 Object Value, boolean pIsSelected, boolean pIsExpanded,
                 boolean pIsLeaf, int pRow, boolean pHasFocus) {
  
	    DefaultMutableTreeNode node = ( DefaultMutableTreeNode )Value;  
            Object nodeInfo = node.getUserObject();
            BookInfo book = (BookInfo) nodeInfo;
	    super.getTreeCellRendererComponent(pTree, Value, pIsSelected,
                     pIsExpanded, pIsLeaf, pRow, pHasFocus);

            //setBackgroundNonSelectionColor(new Color(255, 255, 255)); 
     
            if ( node.isRoot() || ( !node.isLeaf() ) || ( node.isLeaf() ) ) {
                if ( node.isRoot() ) {
                    setIcon(new ImageIcon(getClass().getResource( book.treeRoot )));
                    //setTextNonSelectionColor (new Color (0, 0, 0) ); 
                
                } else if ( !node.isLeaf() && !node.isLeaf() != node.isRoot() ) {               
                    //setTextNonSelectionColor (new Color (0, 0, 0) ); 
                    //setBackgroundSelectionColor(new Color(0, 255, 0)); 
                    //setBorderSelectionColor(Color.YELLOW); 
                    //setTextSelectionColor(Color.blue);
                    setIcon(new ImageIcon(getClass().getResource( book.treePastaNoExpande )));
                } else {
                    //if ( tree == tree1 ){ 
                        //setIcon(new ImageIcon(getClass().getResource( book.tree1Nod )));
                    //} else {
                        setIcon(new ImageIcon(getClass().getResource( book.treeNod )));
                    //}                    
                    //setTextNonSelectionColor (new Color (0, 0, 0) ); 
                }
            }
            
            if ( pIsExpanded && !node.isRoot()){
                setIcon(new ImageIcon(getClass().getResource( book.treePastaExpande )));
            }
            if ( pIsLeaf ){
                //setBackgroundSelectionColor(new Color(255, 255, 0)); 
            }                
	    return (this);
	}
        });  
     
        } catch ( Exception e ) {
            //JOptionPane.showMessageDialog( null, "Home - Método: PersonalizarTree() \n" + e.getMessage() );
        }
        
    }     
    
}
